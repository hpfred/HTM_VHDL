// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/11/2023 01:47:24"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    HTM_Core
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module HTM_Core_vlg_sample_tst(
	Action,
	Clock,
	Data,
	MemAddress,
	ProcID,
	Reset,
	TransactionID,
	sampler_tx
);
input [1:0] Action;
input  Clock;
input [7:0] Data;
input [7:0] MemAddress;
input [1:0] ProcID;
input  Reset;
input [1:0] TransactionID;
output sampler_tx;

reg sample;
time current_time;
always @(Action or Clock or Data or MemAddress or ProcID or Reset or TransactionID)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module HTM_Core_vlg_check_tst (
	TransactionStatus,
	sampler_rx
);
input [2:0] TransactionStatus;
input sampler_rx;

reg [2:0] TransactionStatus_expected;

reg [2:0] TransactionStatus_prev;

reg [2:0] TransactionStatus_expected_prev;

reg [2:0] last_TransactionStatus_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	TransactionStatus_prev = TransactionStatus;
end

// update expected /o prevs

always @(trigger)
begin
	TransactionStatus_expected_prev = TransactionStatus_expected;
end


// expected TransactionStatus[ 2 ]
initial
begin
	TransactionStatus_expected[2] = 1'bX;
end 
// expected TransactionStatus[ 1 ]
initial
begin
	TransactionStatus_expected[1] = 1'bX;
end 
// expected TransactionStatus[ 0 ]
initial
begin
	TransactionStatus_expected[0] = 1'bX;
end 
// generate trigger
always @(TransactionStatus_expected or TransactionStatus)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected TransactionStatus = %b | ",TransactionStatus_expected_prev);
	$display("| real TransactionStatus = %b | ",TransactionStatus_prev);
`endif
	if (
		( TransactionStatus_expected_prev[0] !== 1'bx ) && ( TransactionStatus_prev[0] !== TransactionStatus_expected_prev[0] )
		&& ((TransactionStatus_expected_prev[0] !== last_TransactionStatus_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port TransactionStatus[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", TransactionStatus_expected_prev);
		$display ("     Real value = %b", TransactionStatus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_TransactionStatus_exp[0] = TransactionStatus_expected_prev[0];
	end
	if (
		( TransactionStatus_expected_prev[1] !== 1'bx ) && ( TransactionStatus_prev[1] !== TransactionStatus_expected_prev[1] )
		&& ((TransactionStatus_expected_prev[1] !== last_TransactionStatus_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port TransactionStatus[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", TransactionStatus_expected_prev);
		$display ("     Real value = %b", TransactionStatus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_TransactionStatus_exp[1] = TransactionStatus_expected_prev[1];
	end
	if (
		( TransactionStatus_expected_prev[2] !== 1'bx ) && ( TransactionStatus_prev[2] !== TransactionStatus_expected_prev[2] )
		&& ((TransactionStatus_expected_prev[2] !== last_TransactionStatus_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port TransactionStatus[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", TransactionStatus_expected_prev);
		$display ("     Real value = %b", TransactionStatus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_TransactionStatus_exp[2] = TransactionStatus_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module HTM_Core_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] Action;
reg Clock;
reg [7:0] Data;
reg [7:0] MemAddress;
reg [1:0] ProcID;
reg Reset;
reg [1:0] TransactionID;
// wires                                               
wire [2:0] TransactionStatus;

wire sampler;                             

// assign statements (if any)                          
HTM_Core i1 (
// port map - connection between master ports and signals/registers   
	.Action(Action),
	.Clock(Clock),
	.Data(Data),
	.MemAddress(MemAddress),
	.ProcID(ProcID),
	.Reset(Reset),
	.TransactionID(TransactionID),
	.TransactionStatus(TransactionStatus)
);

// Clock
always
begin
	Clock = 1'b0;
	Clock = #50000 1'b1;
	#50000;
end 
// Action[ 1 ]
initial
begin
	Action[1] = 1'b0;
	Action[1] = #300000 1'b1;
	Action[1] = #400000 1'b0;
end 
// Action[ 0 ]
initial
begin
	Action[0] = 1'b0;
	Action[0] = #100000 1'b1;
	Action[0] = #200000 1'b0;
	Action[0] = #200000 1'b1;
	Action[0] = #200000 1'b0;
end 
// Data[ 7 ]
initial
begin
	Data[7] = 1'b1;
end 
// Data[ 6 ]
initial
begin
	Data[6] = 1'b1;
end 
// Data[ 5 ]
initial
begin
	Data[5] = 1'b1;
end 
// Data[ 4 ]
initial
begin
	Data[4] = 1'b1;
end 
// Data[ 3 ]
initial
begin
	Data[3] = 1'b1;
end 
// Data[ 2 ]
initial
begin
	Data[2] = 1'b1;
end 
// Data[ 1 ]
initial
begin
	Data[1] = 1'b1;
end 
// Data[ 0 ]
initial
begin
	Data[0] = 1'b1;
end 
// MemAddress[ 7 ]
initial
begin
	MemAddress[7] = 1'b0;
end 
// MemAddress[ 6 ]
initial
begin
	MemAddress[6] = 1'b0;
end 
// MemAddress[ 5 ]
initial
begin
	MemAddress[5] = 1'b0;
end 
// MemAddress[ 4 ]
initial
begin
	MemAddress[4] = 1'b0;
end 
// MemAddress[ 3 ]
initial
begin
	MemAddress[3] = 1'b0;
end 
// MemAddress[ 2 ]
initial
begin
	MemAddress[2] = 1'b0;
end 
// MemAddress[ 1 ]
initial
begin
	MemAddress[1] = 1'b0;
end 
// MemAddress[ 0 ]
initial
begin
	MemAddress[0] = 1'b1;
end 
// ProcID[ 1 ]
initial
begin
	ProcID[1] = 1'b0;
end 
// ProcID[ 0 ]
initial
begin
	ProcID[0] = 1'b0;
end 

// Reset
initial
begin
	Reset = 1'b1;
	Reset = #100000 1'b0;
end 
// TransactionID[ 1 ]
initial
begin
	TransactionID[1] = 1'b0;
end 
// TransactionID[ 0 ]
initial
begin
	TransactionID[0] = 1'b0;
end 

HTM_Core_vlg_sample_tst tb_sample (
	.Action(Action),
	.Clock(Clock),
	.Data(Data),
	.MemAddress(MemAddress),
	.ProcID(ProcID),
	.Reset(Reset),
	.TransactionID(TransactionID),
	.sampler_tx(sampler)
);

HTM_Core_vlg_check_tst tb_out(
	.TransactionStatus(TransactionStatus),
	.sampler_rx(sampler)
);
endmodule

